/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

/** WithRequired type helpers */
type WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] }

export interface paths {
  '/updateShipment': {
    put: operations['updateShipment']
  }
  '/updateRecipient': {
    put: operations['updateRecipient']
  }
  '/updateFacility': {
    put: operations['updateFacility']
  }
  '/updateContent': {
    put: operations['updateContent']
  }
  '/addSpecialRequest': {
    post: operations['addSpecialRequest']
  }
  '/addShipment': {
    post: operations['addShipment']
  }
  '/addRecipient': {
    post: operations['addRecipient']
  }
  '/addNote': {
    post: operations['addNote']
  }
  '/addFacility': {
    post: operations['addFacility']
  }
  '/addContent': {
    post: operations['addContent']
  }
  '/searchBooks': {
    get: operations['searchBooksByTitleAndAuthor']
  }
  '/queryGoogle': {
    get: operations['queryGoogleByTitleAndAuthor']
  }
  '/getZineByCode': {
    get: operations['getZineByCode']
  }
  '/getShipmentsByDate': {
    get: operations['getShipmentsByDate']
  }
  '/getShipment': {
    get: operations['getShipment']
  }
  '/getShipmentCountBetweenDates': {
    get: operations['getShipmentCountBetweenDates']
  }
  '/getRecipients': {
    get: operations['getRecipients']
  }
  '/getRecipient': {
    get: operations['getRecipient']
  }
  '/getRecipientLocation': {
    get: operations['getRecipientLocation']
  }
  '/getRecipientByAssignedId': {
    get: operations['getRecipientByAssignedId']
  }
  '/getNoIsbnBooks': {
    get: operations['getBooksWithNoIsbn']
  }
  '/getFacility': {
    get: operations['getFacilityById']
  }
  '/getFacilityByName': {
    get: operations['getFacilityByNameAndState']
  }
  '/getContent': {
    get: operations['getContent']
  }
  '/getContentByTitle': {
    get: operations['getContentByTitle']
  }
  '/getBookByISBN': {
    get: operations['getBookByISBN']
  }
  '/getAllZines': {
    get: operations['getAllZines']
  }
  '/getAllSpecialRequests': {
    get: operations['getAllSpecialRequests']
  }
  '/getAllShipmentsByRecipient': {
    get: operations['getAllShipmentsByRecipient']
  }
  '/getAllRecipients': {
    get: operations['getAllRecipients']
  }
  '/getAllFacilities': {
    get: operations['getAllFacilities']
  }
  '/getAllContent': {
    get: operations['getAllContent']
  }
  '/content': {
    get: operations['getContentByTitleAndAuthor']
  }
  '/deleteShipment': {
    delete: operations['deleteShipment']
  }
  '/deleteRecipient': {
    delete: operations['deleteRecipient']
  }
  '/deleteFacility': {
    delete: operations['deleteFacility']
  }
  '/deleteContent': {
    delete: operations['deleteContent']
  }
  '/deleteAllShipmentsByRecipientId': {
    delete: operations['deleteShipmentsByRecipient']
  }
}

export type webhooks = Record<string, never>

export interface components {
  schemas: {
    Book: WithRequired<
      {
        type: 'Book'
      } & Omit<components['schemas']['PackageContent'], 'type'> & {
          authors?: string
          isbn10?: string
          isbn13?: string
        },
      'title'
    >
    Facility: {
      /** Format: int64 */
      id?: number
      name: string
      additionalInfo?: string
      street: string
      city: string
      /** @enum {string} */
      state: 'NC' | 'AL' | 'TN' | 'WV' | 'KY' | 'MD' | 'VA' | 'DE'
      zip: string
    }
    Note: {
      /** Format: int64 */
      id?: number
      content?: string
      /** Format: date */
      date?: string
    }
    PackageContent: {
      /** Format: int64 */
      id?: number
      title: string
      type: string
    }
    Recipient: {
      /** Format: int64 */
      id?: number
      firstName: string
      middleName?: string
      lastName: string
      assignedId?: string
      facility?: components['schemas']['Facility']
      shipments?: components['schemas']['Shipment'][]
      specialRequests?: components['schemas']['SpecialRequest'][]
    }
    Shipment: {
      /** Format: int64 */
      id?: number
      /** Format: date */
      date?: string
      facility?: components['schemas']['Facility']
      recipient?: components['schemas']['Recipient']
      notes?: components['schemas']['Note'][]
      content?: (components['schemas']['Book'] | components['schemas']['Zine'])[]
    }
    SpecialRequest: {
      /** Format: int64 */
      id?: number
      volunteerName?: string
      request?: string
      /** Format: date */
      specialRequestDate?: string
      /** Format: date */
      letterMailedDate?: string
      /** @enum {string} */
      category?:
        | 'VOCATIONAL'
        | 'EDUCATIONAL'
        | 'CAREER_GROWTH'
        | 'FOREIGN_LANGUAGE'
        | 'LEGAL'
        | 'SPIRITUAL_RELIGIOUS'
        | 'OTHER'
      /** @enum {string} */
      status?: 'OPEN' | 'COMPLETED' | 'CANCELLED'
      recipient?: components['schemas']['Recipient']
    }
    Zine: WithRequired<
      {
        type: 'Zine'
      } & Omit<components['schemas']['PackageContent'], 'type'> & {
          code?: string
        },
      'code' | 'title'
    >
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}

export type $defs = Record<string, never>

export type external = Record<string, never>

export interface operations {
  updateShipment: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Shipment']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Shipment']
        }
      }
    }
  }
  updateRecipient: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Recipient']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Recipient']
        }
      }
    }
  }
  updateFacility: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Facility']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Facility']
        }
      }
    }
  }
  updateContent: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Book'] | components['schemas']['Zine']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Book'] | components['schemas']['Zine']
        }
      }
    }
  }
  addSpecialRequest: {
    requestBody: {
      content: {
        'application/json': components['schemas']['SpecialRequest']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['SpecialRequest']
        }
      }
    }
  }
  addShipment: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Shipment']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Shipment']
        }
      }
    }
  }
  addRecipient: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Recipient']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Recipient']
        }
      }
    }
  }
  addNote: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Note']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Note']
        }
      }
    }
  }
  addFacility: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Facility']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Facility']
        }
      }
    }
  }
  addContent: {
    requestBody: {
      content: {
        'application/json': components['schemas']['Book'] | components['schemas']['Zine']
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Book'] | components['schemas']['Zine']
        }
      }
    }
  }
  searchBooksByTitleAndAuthor: {
    parameters: {
      query: {
        title: string
        author?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Book'][]
        }
      }
    }
  }
  queryGoogleByTitleAndAuthor: {
    parameters: {
      query: {
        title: string
        author?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Book'][]
        }
      }
    }
  }
  getZineByCode: {
    parameters: {
      query: {
        code: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Zine']
        }
      }
    }
  }
  getShipmentsByDate: {
    parameters: {
      query: {
        date: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Shipment'][]
        }
      }
    }
  }
  getShipment: {
    parameters: {
      query: {
        id: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Shipment']
        }
      }
    }
  }
  getShipmentCountBetweenDates: {
    parameters: {
      query: {
        date1: string
        date2: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': number
        }
      }
    }
  }
  getRecipients: {
    parameters: {
      query: {
        firstName: string
        lastName: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Recipient'][]
        }
      }
    }
  }
  getRecipient: {
    parameters: {
      query: {
        id: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Recipient']
        }
      }
    }
  }
  getRecipientLocation: {
    parameters: {
      query: {
        id: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': string
        }
      }
    }
  }
  getRecipientByAssignedId: {
    parameters: {
      query: {
        assignedId: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Recipient']
        }
      }
    }
  }
  getBooksWithNoIsbn: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Book'][]
        }
      }
    }
  }
  getFacilityById: {
    parameters: {
      query: {
        id: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Facility']
        }
      }
    }
  }
  getFacilityByNameAndState: {
    parameters: {
      query: {
        name: string
        state: 'NC' | 'AL' | 'TN' | 'WV' | 'KY' | 'MD' | 'VA' | 'DE'
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Facility'][]
        }
      }
    }
  }
  getContent: {
    parameters: {
      query: {
        id: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Book'] | components['schemas']['Zine']
        }
      }
    }
  }
  getContentByTitle: {
    parameters: {
      query: {
        title: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': (components['schemas']['Book'] | components['schemas']['Zine'])[]
        }
      }
    }
  }
  getBookByISBN: {
    parameters: {
      query: {
        isbn: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Book']
        }
      }
    }
  }
  getAllZines: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Zine'][]
        }
      }
    }
  }
  getAllSpecialRequests: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['SpecialRequest'][]
        }
      }
    }
  }
  getAllShipmentsByRecipient: {
    parameters: {
      query: {
        id: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Shipment'][]
        }
      }
    }
  }
  getAllRecipients: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Recipient'][]
        }
      }
    }
  }
  getAllFacilities: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': components['schemas']['Facility'][]
        }
      }
    }
  }
  getAllContent: {
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': (components['schemas']['Book'] | components['schemas']['Zine'])[]
        }
      }
    }
  }
  getContentByTitleAndAuthor: {
    parameters: {
      query: {
        title: string
        author?: string
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: {
          '*/*': (components['schemas']['Book'] | components['schemas']['Zine'])[]
        }
      }
    }
  }
  deleteShipment: {
    parameters: {
      query: {
        id: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
    }
  }
  deleteRecipient: {
    parameters: {
      query: {
        id: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
    }
  }
  deleteFacility: {
    parameters: {
      query: {
        id: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
    }
  }
  deleteContent: {
    parameters: {
      query: {
        id: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
    }
  }
  deleteShipmentsByRecipient: {
    parameters: {
      query: {
        id: number
      }
    }
    responses: {
      /** @description OK */
      200: {
        content: never
      }
    }
  }
}
